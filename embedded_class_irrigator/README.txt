This project folder contains the software for an automatic irrigator for a small house plant I built. It measures resistance of soil using a STEMMA soil sensor from Adafruit. Soil resistance indicates how much moisture is in the soil, if there is a low amount of moisture, water is released to the plant. Water is released by sending a signal to a water valve connected to a general purpose I/O port on the system board. A ultrasonic distance sensor is used to measure how much water gets released from the attached jug. This prevents the pot from flooding and makes it more efficient.

This was a brief overview of the project. Continue reading for more details.

The soil resistance sensor comes with data structures and code from the adafuit arduino library. Programming this module was very simple for me using functions and classes from that.
The valve was very interesting for me to set up. The process of setting up the circuitry was a learning process for me. The bread board, other devices and system GPIO run using 3.3/5V but the valve uses 12V. I had to set up 2 different power sources and learn how to use diodes in order to prevent a surge in the system. This was my first time designing circuits in a project.
The ultrasonic distance sensor is a very interesting part. It uses sound had two different pins, a pin that sent out a soundwave pulse and a pin that gets set when that soundwave is recieved. The time difference between these two events is used to measure the distance between the object that soundwave is bouncing off of, and the sensor. 
Programming this sensor was extremely challenging. I had to find a way to measure the time in microseconds in order to measure distance in centimeters accurately. Setting up a timer using that small of an interval using the conventional timer tools on the Pololu board was not going to suffice, interrupts would happen faster than the system would be able to handle. I ended up calculating the count of machine instructions that would happen depending on how high an iterator value would increase. I know how many machine instructions happen in a microsecond on this processor, so I can calculate how many microseconds passed based on that. The Arduino version of the code uses the Arduino library function "PulseIn" which essentially does the same thing as my code, just more accurately.
 